
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Department {
  departmentID Int     @id @default(autoincrement())
  name         String  @unique
  users        User[]
}

model User {
  userID       Int                  @id @default(autoincrement())
  name         String
  email        String               @unique
  password     String?
  role         String?
  departmentID Int?
  department   Department?          @relation(fields: [departmentID], references: [departmentID])
  auditLogs    AuditLog[]
  userProjects UserProject[]
  calls        InternalCallParticipants[]
}

model AuditLog {
  logID       Int      @id @default(autoincrement())
  action      String
  dateTime    DateTime @default(now())
  description String?
  userID      Int
  user        User     @relation(fields: [userID], references: [userID])
}

model Client {
  email        String @id
  name         String
  organization String?
  calls        ExternalCallParticipants[]
}

model Project {
  projectID    Int            @id @default(autoincrement())
  name         String
  description  String?
  userProjects UserProject[]
  calls        Call[]
  reports      Report[]
}

model UserProject {
  userID      Int
  projectID   Int
  projectRole String?

  user    User    @relation(fields: [userID], references: [userID])
  project Project @relation(fields: [projectID], references: [projectID], onDelete: Cascade)

  @@id([userID, projectID])
}

model Call {
  callID    Int      @id @default(autoincrement())
  title     String?
  startTime DateTime?
  endTime   DateTime?
  summary   String?
  projectID Int
  project   Project  @relation(fields: [projectID], references: [projectID], onDelete: Cascade)
  internalParticipants InternalCallParticipants[]
  externalParticipants ExternalCallParticipants[]
  reportCalls ReportCall[]
}

model InternalCallParticipants {
  userID Int
  callID Int

  user User @relation(fields: [userID], references: [userID])
  call Call @relation(fields: [callID], references: [callID], onDelete: Cascade)

  @@id([userID, callID])
}

model ExternalCallParticipants {
  clientEmail String
  callID      Int

  client Client @relation(fields: [clientEmail], references: [email])
  call   Call   @relation(fields: [callID], references: [callID], onDelete: Cascade)

  @@id([clientEmail, callID])
}

model Report {
  reportID    Int      @id @default(autoincrement())
  reportType  String?
  generatedAt DateTime?
  fileURL     String?
  format      String?
  projectID   Int
  project     Project  @relation(fields: [projectID], references: [projectID], onDelete: Cascade)
  reportCalls ReportCall[]
}

model ReportCall {
  reportID  Int
  callID    Int
  callType  String?
  startTime DateTime?
  endTime   DateTime?

  report Report @relation(fields: [reportID], references: [reportID], onDelete: Cascade)
  call   Call   @relation(fields: [callID], references: [callID], onDelete: Cascade)

  @@id([reportID, callID])
}

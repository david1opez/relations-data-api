generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Department {
  departmentID Int    @id @default(autoincrement())
  name         String @unique
  users        User[]
}

model User {
  userID       Int       @id @default(autoincrement())
  name         String
  email        String    @unique
  uid          String?
  role         String?
  profilePicture String? 
  departmentID Int?
  department   Department? @relation(fields: [departmentID], references: [departmentID], onDelete: SetNull, onUpdate: Cascade)
  auditLogs    AuditLog[]
  userProjects UserProject[]
  calls        InternalCallParticipants[]
}

model AuditLog {
  logID       Int      @id @default(autoincrement())
  action      String
  dateTime    DateTime @default(now())
  description String?
  userID      Int?
  user        User? @relation(fields: [userID], references: [userID], onDelete: SetNull, onUpdate: Cascade)
}

model Client {
  email        String @id
  name         String
  organization String?
  description  String?
  calls        ExternalCallParticipants[]
  projects     Project[]
}

model Project {
  projectID          Int      @id @default(autoincrement())
  name               String
  description        String?
  problemDescription String?
  reqFuncionales     String?
  reqNoFuncionales   String?
  startDate          DateTime?
  endDate            DateTime?
  clientEmail        String?
  client             Client? @relation(fields: [clientEmail], references: [email], onDelete: Cascade)
  userProjects       UserProject[]
  calls              Call[]
  reports            Report[]
}

model UserProject {
  userID      Int
  projectID   Int
  projectRole String?

  user    User    @relation(fields: [userID], references: [userID], onDelete: Cascade, onUpdate: Cascade)
  project Project @relation(fields: [projectID], references: [projectID], onDelete: Cascade, onUpdate: Cascade)

  @@id([userID, projectID])
}

model Call {
  callID    Int      @id @default(autoincrement())
  title     String?
  startTime DateTime?
  endTime   DateTime?
  summary   String?
  projectID Int?
  isAnalyzed  Boolean  @default(false)
  project   Project? @relation(fields: [projectID], references: [projectID], onDelete: SetNull, onUpdate: Cascade)
  internalParticipants InternalCallParticipants[]
  externalParticipants ExternalCallParticipants[]
  reportCalls ReportCall[]
}

model InternalCallParticipants {
  userID Int
  callID Int

  user User @relation(fields: [userID], references: [userID], onDelete: Cascade, onUpdate: Cascade)
  call Call @relation(fields: [callID], references: [callID], onDelete: Cascade, onUpdate: Cascade)

  @@id([userID, callID])
}

model ExternalCallParticipants {
  clientEmail String
  callID      Int

  client Client @relation(fields: [clientEmail], references: [email], onDelete: Cascade, onUpdate: Cascade)
  call   Call   @relation(fields: [callID], references: [callID], onDelete: Cascade, onUpdate: Cascade)

  @@id([clientEmail, callID])
}

model Report {
  reportID    Int      @id @default(autoincrement())
  reportType  String?
  generatedAt DateTime?
  fileURL     String?
  format      String?
  projectID   Int?
  project     Project? @relation(fields: [projectID], references: [projectID], onDelete: SetNull, onUpdate: Cascade)
  reportCalls ReportCall[]
}

model ReportCall {
  reportID  Int
  callID    Int
  callType  String?
  startTime DateTime?
  endTime   DateTime?

  report Report? @relation(fields: [reportID], references: [reportID], onDelete: Cascade, onUpdate: Cascade)
  call   Call    @relation(fields: [callID], references: [callID], onDelete: Cascade, onUpdate: Cascade)

  @@id([reportID, callID])
}
